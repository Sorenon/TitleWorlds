loom {
    accessWidenerPath = file("src/main/resources/titleworlds.accesswidener")
}

dependencies {
    // We depend on fabric loader here to use the fabric @Environment annotations and get the mixin dependencies
    // Do NOT use other classes from fabric loader
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    // Remove the next line if you don't want to depend on the API
//    modApi "dev.architectury:architectury:${rootProject.architectury_version}"


//    modImplementation("net.fabricmc.fabric-api:fabric-api:${properties["fabric_version"].toString()}")

//    modCompileOnlyApi("maven.modrinth:modmenu:${properties["modmenu_version"]}")

//    modCompileOnly("maven.modrinth:sodium:${properties["sodium_version"].toString()}")

//    include(implementation("com.electronwill.night-config:core:${rootProject.properties["night_config_version"].toString()}"))
//    include(implementation("com.electronwill.night-config:toml:${rootProject.properties["night_config_version"].toString()}"))

    modApi("me.shedaniel.cloth:cloth-config:${rootProject.properties["cloth_config_version"]}")

//    modRuntimeOnly("maven.modrinth:lazydfu:0.1.3") {
//        exclude(module = "fabric-loader")
//        isTransitive = false
//    }
}

publishing {
    publications {
        mavenCommon(MavenPublication) {
            artifactId = rootProject.archives_base_name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
